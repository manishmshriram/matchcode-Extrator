# -*- coding: utf-8 -*-
"""Untitled22.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ki46m-sQAxn-xfENku_9UlNVsb7Afha5
"""

import streamlit as st
import pandas as pd
import re
import io

# ---- Utility function: Pad Matchcode ----

def pad_matchcode(mc):
    if pd.isna(mc):
        return mc
    mc = mc.strip()
    match = re.match(r"([A-Z]+)(\d+)$", mc, re.I)
    if match:
        prefix, num = match.groups()
        return f"{prefix}{num.zfill(3)}"
    return mc

# ---- App Logic ----

def process_file(df):
    columns_to_split = [
        "Notify Party",
        "Shipper",
        "Consignee",
        "Customer",
        "MR Party TOP Name Matchcode_Padded"  # Update if required
    ]
    for col in columns_to_split:
        if col in df.columns:
            # Split by last "/" into 2 columns, strip spaces
            df[[f"{col}_Company", f"{col}_Matchcode"]] = df[col].str.rsplit("/", n=1, expand=True)
            df[f"{col}_Company"] = df[f"{col}_Company"].str.strip()
            df[f"{col}_Matchcode"] = df[f"{col}_Matchcode"].str.strip()
            df[f"{col}_Matchcode_Padded"] = df[f"{col}_Matchcode"].apply(pad_matchcode)
    return df

# ---- Streamlit UI ----

st.set_page_config(page_title="Company-Matchcode Padder", layout="centered")
st.title("Company / Matchcode Separator & Padded Matchcode Tool")

st.write("Upload an Excel (.xlsx) or CSV file with columns like 'Notify Party', 'Shipper', etc. The app will split the company names and matchcodes, apply smart padding, and let you download the result.")

uploaded_file = st.file_uploader("ðŸ“‚ Upload Excel or CSV", type=["xlsx", "csv"])

if uploaded_file:
    try:
        if uploaded_file.name.endswith(".csv"):
            df = pd.read_csv(uploaded_file)
        else:
            df = pd.read_excel(uploaded_file)
        st.success(f"File '{uploaded_file.name}' uploaded! Processing...")

        processed_df = process_file(df)
        st.write("Preview of processed data:")
        st.dataframe(processed_df.head())

        # Download section
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            processed_df.to_excel(writer, index=False)
        st.download_button(
            label="Download Output Excel",
            data=output.getvalue(),
            file_name="output_with_padded_matchcodes.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
    except Exception as e:
        st.error(f"Error processing file: {e}")

st.markdown("""
---
**Instructions:**
- Make sure your file contains the necessary columns.
- Any missing columns are skipped â€” no errors will stop the workflow.
- The output includes separate columns for Company, Matchcode, and Padded Matchcode.

**Pro Tips:**
- Ready for Github deployment.
- Extend `columns_to_split` as needed.
""")

# END OF SCRIPT